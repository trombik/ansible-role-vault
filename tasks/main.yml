---
# tasks file for ansible-role-vault

- name: "Include {{ ansible_os_family }}.yml"
  include_vars: "{{ ansible_os_family }}.yml"

- name: "Include install-{{ ansible_os_family }}.yml"
  include: "install-{{ ansible_os_family }}.yml"

- name: Create vault_root_dir
  file:
    path: "{{ vault_root_dir }}"
    mode: 0755
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    state: directory
  notify: Restart vault

- name: Create vault_root_subdirs
  file:
    path: "{{ vault_root_dir }}/{{ item }}"
    mode: 0755
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    state: directory
  notify: Restart vault
  with_items: "{{ vault_root_subdirs }}"

- name: Create vault.conf
  template:
    src: vault.hcl.j2
    dest: "{{ vault_conf_file }}"
    # TODO validate
    # validate: echo %s
  notify: Restart vault

- name: Start vault
  service:
    name: "{{ vault_service }}"
    enabled: true
    state: started

- name: Wait for vault to start
  wait_for:
    host: "{{ vault_listen_addr }}"
    port: "{{ vault_listen_port }}"
    delay: 3

- name: See if vault is initialized via API
  ansible.builtin.uri:
    url: "{{ vault_listen_scheme }}://{{ vault_listen_addr }}:{{ vault_listen_port }}/v1/sys/init"
    method: GET
  register: __register_vault_init_status

- name: Include init.yml to initialize vault
  include_tasks: init.yml
  when: not __register_vault_init_status['json']['initialized'] | bool

- name: See if vault is sealed via API
  ansible.builtin.uri:
    url: "{{ vault_listen_scheme }}://{{ vault_listen_addr }}:{{ vault_listen_port }}/v1/sys/seal-status"
    method: GET
  register: __register_vault_seal_status

- name: Include unseal.yml to unseal vault
  include_tasks: unseal.yml
  when: __register_vault_seal_status['json']['sealed'] | bool
